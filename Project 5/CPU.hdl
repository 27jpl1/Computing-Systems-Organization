// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //PC
    And(a=instruction[2], b=ng, out=pctest1);
    And(a=instruction[1], b=zr, out=pctest2);
    Not(in=ng, out=notng);
    And(a=instruction[0], b=notng, out=pctest3);
    Not(in=zr, out=notzr);
    And(a=instruction[0], b=notzr, out=pctest4);
    Or(a=pctest1, b=pctest2, out=pctest12);
    And(a=pctest3, b=pctest4, out=pctest34);
    Or(a=pctest12, b=pctest34, out=pctest1234);
    And(a=pctest1234, b=instruction[15], out=pcload);
    Not(in=pcload, out=pcinc);
    PC(in=aregout, inc=pcinc, load=pcload, reset=reset, out[0..14]=pc);

    //Mux16 1
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=aregmux);

    //A register
    Not(in=instruction[15], out=ainstruction);
    Or(a=ainstruction, b=instruction[5], out=aregload);
    ARegister(in=aregmux, load=aregload, out=aregout, out[0..14]=addressM);

    //Mux 16 2
    Mux16(a=aregout, b=inM, sel=instruction[12], out=alumux);

    //ALU
    ALU(x=dregout, y=alumux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);

    //D Register
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=aluout, load=dload, out=dregout);

    //Write M
    And(a=instruction[3], b=instruction[15], out=writeM);
}
